package com.moviedb_api.customer;

import com.google.gson.Gson;
import com.moviedb_api.customer.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
@Controller // This means that this class is a Controller
@RequestMapping(path="/customer") // This means URL's start with /demo (after Application path)
public class CustomerController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CustomerRepository customerRepository;

    @GetMapping(path="/all")
    public @ResponseBody
    Page<Customer> getAllUsers(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    ) {
        // This returns a JSON or XML with the movies
        return customerRepository.findAll(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/first_name/{fname}")
    public @ResponseBody Page<Customer> getCustomerByFirstName(
            @PathVariable(value = "fname") String fname,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    ) {
        // This returns a JSON or XML with the movies
        return customerRepository.findByFirstName(
                fname,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/last_name/{lname}")
    public @ResponseBody Page<Customer> getCustomerByLastName(
            @PathVariable(value = "lname") String lname,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    ) {
        // This returns a JSON or XML with the movies
        return customerRepository.findByLastName(
                lname,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/postcode/{postcode}")
    public @ResponseBody Page<Customer> getCustomerByPostCode(
            @PathVariable(value = "postcode") String postcode,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    ) {
        // This returns a JSON or XML with the movies
        return customerRepository.findByPostcode(
                postcode,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/email/{email}")
    public @ResponseBody Optional<Customer> getCustomerByEmail(
            @PathVariable(value = "email") String email)
    {
        return customerRepository.findByEmail(email);
    }

    @GetMapping("/{id}")
    public @ResponseBody Optional<Customer> getCustomerById(@PathVariable(value = "id") Integer id)
    {
        return customerRepository.findById(id);
    }

    @GetMapping("/auth")
    public @ResponseBody Customer getCustomerByEmailandPassword(
            String email,
            String password)

    {
        Gson gson = new Gson();
        Optional<Customer> customer = customerRepository.findByEmailAndPassword(email,password);

        if(customer.isPresent()) {
           return customer.get();
        }

        Customer newCustomer = new Customer();
        newCustomer.setFirstName("");
        newCustomer.setLastName("");
        newCustomer.setAddress("");
        newCustomer.setUnit("");
        newCustomer.setEmail("");
        newCustomer.setPassword("");
        newCustomer.setCity("");
        newCustomer.setState("");
        newCustomer.setPostcode("");

        return newCustomer;
    }

    @PutMapping("/{id}")
    @ResponseBody
    public Customer replaceEmployee(
            @RequestBody Customer newCustomer,
            @PathVariable int id) {

        return customerRepository.findById(id)
                .map(customer -> {
                    customer.setFirstName(newCustomer.getFirstName());
                    customer.setLastName(newCustomer.getLastName());
                    customer.setAddress(newCustomer.getAddress());
                    customer.setEmail(newCustomer.getEmail());
                    customer.setPassword(newCustomer.getPassword());
                    customer.setCity(newCustomer.getCity());
                    customer.setState(newCustomer.getState());
                    customer.setPostcode(newCustomer.getPostcode());
                    customer.setUnit(newCustomer.getUnit());
                    return customerRepository.save(customer);
                })
                .orElseGet(() -> {
                    return customerRepository.save(newCustomer);
                });
    }
}