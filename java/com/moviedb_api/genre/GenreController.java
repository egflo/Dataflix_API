package com.moviedb_api.genre;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/genre")
public class GenreController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private GenreRepository genreRepository;

    @GetMapping(path="/all")
    public @ResponseBody
    Page<Genre> getAll(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    ) {
        // This returns a JSON or XML with the movies
        return genreRepository.findAll(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/{id}")
    public @ResponseBody Optional<Genre> getGenreById(@PathVariable(value = "id") Integer id)
    {
        return genreRepository.findById(id);
    }

    @GetMapping(path="/name/{name}")
    //@JsonView(Views.Public.class)
    public @ResponseBody
    Page<Genre> findByGenreName(
            @PathVariable String name,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy) {
        // This returns a JSON or XML with the movies
        //return movieRepository.findAllByRated(rated);
        return genreRepository.findByName(
                name,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }
}
