package com.moviedb_api.order;

import com.moviedb_api.sale.Sale;
import com.moviedb_api.sale.SaleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/order") // This means URL's start with /movies (after Application path)
public class OrderController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private OrderRepository orderRepository;

    @Autowired
    private SaleRepository saleRepository;

    @PutMapping("/add")
    @ResponseBody
    public Order addOrder(
            @RequestBody Order newOrder){

        //Sale sale = new Sale();
        //sale.setSaleDate(newSale.getSaleDate());
        //sale.setCustomerId(newSale.getCustomerId());
        // sale.setOrders();
        System.out.println("ORDER ID: " + newOrder.getOrderId());
        System.out.println("Movie ID: " + newOrder.getMovieId());
        System.out.println("Quantity: " + newOrder.getQuantity());
        System.out.println("List Price: " + newOrder.getList_price());

        return orderRepository.save(newOrder);
    }



    @GetMapping(path="/count/{id}")
    public @ResponseBody
    long getMovieIdCount(
            @PathVariable(value = "id") String id
    ){
        return orderRepository.countByMovieId(id);
    }

    @GetMapping(path="/sellers")
    public @ResponseBody
    Page<Order> getBestSellers(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page
    ){
        return orderRepository.findBestSellers(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5)
                )
        );
    }

    @GetMapping(path="/all")
    public @ResponseBody
    Page<Order> getAllOrders(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    )     {
        return orderRepository.findAll(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/{id}")
    public @ResponseBody
    Optional<Order> findOrderById(@PathVariable(value = "id") Integer id)
    {
        return orderRepository.findByOrderId(id);
    }
}