package com.moviedb_api.review;

import com.moviedb_api.ratings.Rating;
import com.moviedb_api.ratings.RatingRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/review") // This means URL's start with /movies (after Application path)
public class ReviewController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ReviewRepository reviewRepository;

    @Autowired
    private ReviewService reviewService;

    @GetMapping(path="/")
    public @ResponseBody
    ResponseEntity<?> getReview(@RequestBody ReviewRequest reviewRequest)
    {
        return reviewService.findById(reviewRequest.getId());
    }

    @GetMapping(path="/{id}")
    public @ResponseBody
    ResponseEntity<?> getReviewById(@PathVariable("id") Integer id)
    {
        return reviewService.findById(id);
    }

    @PutMapping(path="/")
    public @ResponseBody
    ResponseEntity<?> addReview(@RequestBody ReviewRequest reviewRequest)
    {

        return reviewService.create(reviewRequest);
    }


    @PostMapping(path="/")
    public @ResponseBody
    ResponseEntity<?> updateReview(@RequestBody ReviewRequest reviewRequest)
    {
        return reviewService.update(reviewRequest);
    }


    @DeleteMapping(path="/{id}")
    public @ResponseBody
    ResponseEntity<?> deleteReview(@PathVariable("id") Integer id)
    {
        ReviewRequest reviewRequest = new ReviewRequest();
        reviewRequest.setId(id);
        return reviewService.delete(reviewRequest);
    }


    @GetMapping(path="/search/{search}")
    public @ResponseBody
    ResponseEntity<?> searchReview(
            @PathVariable("search") String search,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<Integer> orderBy,
            @RequestParam Optional<String> sortBy
    )
    {
        return reviewService.search(
                search,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                        sortBy.orElse("id")
                )
        );
    }


    @GetMapping(path="/all")
    public ResponseEntity<?> getAllReviews(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<Integer> orderBy,
            @RequestParam Optional<String> sortBy
    )

    {
        return reviewService.findAll(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                        sortBy.orElse("id")
                )
        );
    }



    @GetMapping(path="/movie/{movieId}")
    public ResponseEntity<?> getReviewsByMovie(
            @PathVariable String movieId,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page
    ){
        return reviewService.findByMovieId(
                movieId,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5)
                )
        );
    }

    @GetMapping(path="/customer/{id}")
    public ResponseEntity<?> getReviewsByCustomer(
            @PathVariable Integer id,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page
    ){
        return reviewService.findByCustomerId(
                id,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5)
                )
        );
    }

}