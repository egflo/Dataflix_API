package com.moviedb_api.tax;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/tax") // This means URL's start with /movies (after Application path)
public class TaxController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TaxRepository taxRepository;


    @GetMapping(path="/all")
    public ResponseEntity<?> getAllTaxes(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    )     {

        Page<TaxRate> rates = taxRepository.findAll(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                ));

        return new ResponseEntity<>(
                rates,
                HttpStatus.OK);
    }


    @GetMapping("/{id}")
    public ResponseEntity<?> findTaxRateById(@PathVariable(value = "id") Integer id)
    {
        Optional<TaxRate> rate = taxRepository.findById(id);

        if(rate.isPresent()) {
            return new ResponseEntity<>(
                    rate.get(),
                    HttpStatus.OK);
        }

        else {
            Map<String, Object> response = new HashMap<>();
            response.put("message","The resource you requested has been modified");
            response.put("status",401);

            return new ResponseEntity<>(
                    response,
                    HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/city/{city}")
    public ResponseEntity<?> findTaxRateByCity(@PathVariable(value = "city") String  city)
    {
        Iterable<TaxRate> rates = taxRepository.findByCityContaining(city);

        return new ResponseEntity<>(
                rates,
                HttpStatus.OK);
    }

}