package com.moviedb_api.inventory;


import com.moviedb_api.price.Price;
import com.moviedb_api.price.PriceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/inventory") // This means URL's start with /movies (after Application path)
public class InventoryController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private InventoryService inventoryService;


    @GetMapping("/")
    public ResponseEntity<?> findByProduct(
            @RequestBody InventoryRequest inventoryRequest
    )
    {
        return inventoryService.findByProductId(inventoryRequest.getProductId());
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> findByProductId(
            @PathVariable(value = "id") String id
    )
    {
        return inventoryService.findByProductId(id);
    }

    @PostMapping("/")
    public ResponseEntity<?> updateInventory(
            @RequestBody InventoryRequest inventoryRequest
    )
    {
        return inventoryService.updateInventory(inventoryRequest);
    }

    @PutMapping("/")
    public ResponseEntity<?> addInventory(
            @RequestBody InventoryRequest inventoryRequest
    )
    {
        return inventoryService.addInventory(inventoryRequest);
    }


    @GetMapping(path="/all")
    public ResponseEntity<?> getAllItems(
            @RequestParam Optional<String> status,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<Integer> orderBy,
            @RequestParam Optional<String> sortBy
    ) {

        return inventoryService.findAll(
                status,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                        sortBy.orElse("id")
                ) );

    }


    @GetMapping("/search/{search}")
    public @ResponseBody ResponseEntity<?> search(
            @PathVariable(value = "search") String search,
            @RequestParam Optional<String> status,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<Integer> orderBy,
            @RequestParam Optional<String> sortBy
    )
    {
            return inventoryService.searchInventory(
                    search,
                    status,
                    PageRequest.of(
                            page.orElse(0),
                            limit.orElse(5),
                            orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                            sortBy.orElse("id")
                    )
            );
    }

}