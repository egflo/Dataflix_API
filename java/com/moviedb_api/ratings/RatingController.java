package com.moviedb_api.ratings;

import com.moviedb_api.order.Order;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/rating") // This means URL's start with /movies (after Application path)
public class RatingController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RatingRepository ratingRepository;

    @GetMapping(path="/all")
    public @ResponseBody
    Page<Rating> getAllRatings(
        @RequestParam Optional<Integer> limit,
        @RequestParam Optional<Integer> page,
        @RequestParam Optional<String> sortBy)

        {
            return ratingRepository.findAll(
                    PageRequest.of(
                            page.orElse(0),
                            limit.orElse(5),
                            Sort.Direction.ASC, sortBy.orElse("movieId")
                    )
            );
        }

    @GetMapping(path="/rated")
    public @ResponseBody
    Page<Rating> getTopRated(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page
    ){
        return ratingRepository.findBestRated(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5)
                )
        );
    }

    @GetMapping(path="/critic")
    public @ResponseBody
    Page<Rating> getCriticAcc(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page
    ){
        return ratingRepository.findBestCritic(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5)
                )
        );
    }

    @GetMapping("/{id}")
    public @ResponseBody
    Optional<Rating> findOrderById(@PathVariable(value = "id") String id)
    {
        return ratingRepository.findByMovieId(id);
    }
}