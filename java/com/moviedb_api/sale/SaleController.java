package com.moviedb_api.sale;

import com.google.gson.Gson;
import com.moviedb_api.order.OrderRepository;
import com.moviedb_api.security.JwtTokenUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.*;


@Controller // This means that this class is a Controller
@RequestMapping(path="/sale") // This means URL's start with /movies (after Application path)
public class SaleController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private SaleRepository saleRepository;

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private JwtTokenUtil authenticationService;

    @Autowired
    private SaleService saleService;


    /**
     * USER METHODS
     */
    @GetMapping("/")
    public
    ResponseEntity<?> getSalesByUser(
            @RequestHeader HttpHeaders headers,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    )     {

        String token = headers.get("authorization").get(0).split(" ")[1].trim();
        String userId = authenticationService.getUserId(token);

        return saleService.getSalesByCustomerId(
                Integer.parseInt(userId),
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.DESC, sortBy.orElse("saleDate")
                )
        );

    }

    @PostMapping("/")
    public ResponseEntity<?> addSaleUser(
            @RequestHeader HttpHeaders headers,
            @RequestBody SaleRequest request){

        String token = headers.get("authorization").get(0).split(" ")[1].trim();
        String userId = authenticationService.getUserId(token);

        request.setCustomerId(Integer.parseInt(userId));
        return saleService.addSale(request);
    }


    @PutMapping("/")
    public ResponseEntity<?> updateSaleUser(
            @RequestHeader HttpHeaders headers,
            @RequestBody SaleRequest request) {

        String token = headers.get("authorization").get(0).split(" ")[1].trim();
        String userId = authenticationService.getUserId(token);
        request.setCustomerId(Integer.parseInt(userId));

        return saleService.updateSale(request);
    }


    /**
     * ADMIN METHODS
     */

    @GetMapping("/search/{search}")
    public ResponseEntity<?> searchSale(
            @PathVariable String search,
            @RequestParam Optional<String> status,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<Integer> orderBy,
            @RequestParam Optional<String> sortBy
    ) {

        return saleService.search(search, status,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                        sortBy.orElse("saleDate")
                )
        );
    }


    @GetMapping(path="/metadata/")
    public @ResponseBody
    ResponseEntity<?> getMetaData(
           // @PathVariable(value = "days") Integer days
           @RequestParam Optional<Integer> days
    ) {
        return saleService.getMetadata(days);
    }
    @GetMapping("/customer/{id}")
    public @ResponseBody
    Page<Sale> findByCustomerId(
            @PathVariable Integer id,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    )     {
        return saleRepository.findSaleByCustomerId(
                id,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.DESC, sortBy.orElse("saleDate")
                )
        );
    }

    @GetMapping("/{id}")
    public @ResponseBody
    ResponseEntity<?> findSaleById(@PathVariable(value = "id") Integer id)
    {
        return saleService.searchSale(id);
    }

    @PostMapping("/{id}")
    public @ResponseBody
    ResponseEntity<?> updateSale(@RequestBody SaleRequest request)
    {
        Optional<Sale> update = saleRepository.findById(request.getId());
        if(update.isPresent()) {
            Sale sale = update.get();
            sale.setStripeId(request.getStripeId());
            Sale save = saleRepository.save(sale);
            return new ResponseEntity<>(
                    save,
                    HttpStatus.OK); //Resource Created
        }
        return new ResponseEntity<>(
                "Sale Not Found",
                HttpStatus.NOT_FOUND);
    }



    @GetMapping(path="/all")
    public @ResponseBody
    Page<Sale> getAllSales(
            @RequestParam Optional<String> status,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<Integer> orderBy,
            @RequestParam Optional<String> sortBy

    )     {
        if (status.isPresent()) {
            return saleRepository.findAllByStatus(
                    status.get(),
                    PageRequest.of(
                            page.orElse(0),
                            limit.orElse(5),
                            orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                            sortBy.orElse("saleDate")
                    )
            );
        }

        return saleRepository.findAll(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                        sortBy.orElse("saleDate")
                )
        );
    }
}