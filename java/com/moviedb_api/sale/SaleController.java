package com.moviedb_api.sale;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.moviedb_api.customer.Customer;
import com.moviedb_api.order.Order;
import com.moviedb_api.order.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/sale") // This means URL's start with /movies (after Application path)
public class SaleController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private SaleRepository saleRepository;

    @Autowired
    private OrderRepository orderRepository;

    @GetMapping(path="/all")
    public @ResponseBody
    Page<Sale> getAllSales(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    )     {
        return saleRepository.findAll(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/customer/{id}")
    public @ResponseBody
    Iterable<Sale> findByCustomerId(@PathVariable(value = "id") Integer id)
    {
        return saleRepository.findSaleByCustomerId(id, Sort.by(Sort.Direction.DESC, "saleDate"));
    }

    @GetMapping("/{id}")
    public @ResponseBody
    Optional<Sale> findSaleById(@PathVariable(value = "id") Integer id)
    {
        return saleRepository.findById(id);
    }


    @PutMapping("/add")
    @ResponseBody
    public Sale addSale(
            @RequestBody String sale){

        //Sale sale = new Sale();
        //sale.setSaleDate(newSale.getSaleDate());
        //sale.setCustomerId(newSale.getCustomerId());
       // sale.setOrders();
        Gson gson = new Gson();
        JsonObject object = gson.fromJson(sale, JsonObject.class);

        Sale newSale = new Sale();

        Integer customer_id = object.get("customerId").getAsInt();
        String sale_date = object.get("saleDate").getAsString();

        newSale.setCustomerId(customer_id);
        newSale.setSaleDate(sale_date);

        newSale = saleRepository.save(newSale);
        int id = newSale.getId();

        System.out.println("id: " + newSale.getId());
        System.out.println("Customer ID: " + newSale.getCustomerId());
        System.out.println("Sale Date: " + newSale.getSaleDate());

        //System.out.println(id);
        JsonObject[] orders = gson.fromJson(object.get("orders"), JsonObject[].class);

        for(JsonObject obj: orders) {
            Order newOrder = new Order();

            newOrder.setOrderId(id);
            newOrder.setMovieId(obj.get("movieId").getAsString());
            newOrder.setQuantity(obj.get("quantity").getAsInt());
            newOrder.setList_price(obj.get("list_price").getAsFloat());

            System.out.println("Order ID: " + newOrder.getOrderId());
            System.out.println("Movie ID: " + newOrder.getMovieId());
            System.out.println("Qty: " + newOrder.getQuantity());

           // newOrder = orderRepository.save(newOrder);

            //newSale.setOrders(orderRepository.save(newOrder));

            newSale.setOrders(newOrder);
        }

        orderRepository.saveAll(newSale.getOrders());
        //System.out.println(gson.toJson(newSale.getOrders()));

        //saleRepository.saveAndFlush(newSale);

        //System.out.println(newSale.getOrders().size());
        //newSale.setOrders();

        //System.out.println(newSale.getOrders().toString() );
        //return saleRepository.save(newSale);
        return newSale;
    }

    @PutMapping("/{id}")
    @ResponseBody
    public Sale replaceSale(
            @RequestBody Sale newSale,
            @PathVariable int id) {

        return saleRepository.findById(id)
                .map(sale -> {
                    sale.setId(newSale.getId());
                    sale.setSaleDate(newSale.getSaleDate());
                    sale.setCustomerId(newSale.getCustomerId());
                    return saleRepository.save(sale);
                })
                .orElseGet(() -> {
                    return saleRepository.save(newSale);
                });
    }
}