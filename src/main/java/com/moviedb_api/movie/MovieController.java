package com.moviedb_api.movie;



import com.fasterxml.jackson.annotation.JsonView;
import com.moviedb_api.API;
import com.moviedb_api.Views;
import com.moviedb_api.customer.Customer;
import com.moviedb_api.ratings.RatingRepository;
import com.moviedb_api.sale.Sale;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.Query;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;

import javax.persistence.criteria.CriteriaBuilder;
import java.util.List;
import java.util.Optional;
import java.util.regex.Pattern;

@Controller // This means that this class is a Controller
@RequestMapping(path="/movie") // This means URL's start with /movies (after Application path)
public class MovieController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MovieRepository movieRepository;

    @Autowired
    private RatingRepository ratingRepository;

    @Autowired
    MovieService service;

    @GetMapping(path="/all")
    //@JsonView(Views.Public.class)
    public @ResponseBody
    Page<Movie> getAllMovies(
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> orderBy,
            @RequestParam Optional<String> sortBy
    ) {
        // This returns a JSON or XML with the movies
        return movieRepository.findAll(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                        sortBy.orElse("id")
                )
        );
    }

    @GetMapping(path="/autocomplete/{title}")
    @JsonView(Views.Public.class)
    public @ResponseBody
    List<Movie> findMovieByTitleAutoComplete(
            @PathVariable String title
    )
    {
        // This returns a JSON or XML with the movies
        //return movieRepository.findByTitle(title);
        return movieRepository.findByTitleLike(title);
    }


    @GetMapping(path="/title/{title}")
    //@JsonView(Views.Public.class)
    public @ResponseBody
    Page<Movie> findMovieByTitle(
            @PathVariable String title,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy,
            @RequestParam Optional<Integer> orderBy
    )
    {
        // This returns a JSON or XML with the movies
        //return movieRepository.findByTitle(title);

        System.out.println("Title: " + title);

        Page<Movie> movies = movieRepository.findByTitleContaining(
                title,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                        sortBy.orElse("id")
                )
        );

        for (Movie movie: movies.getContent()) {
            API.ProcessMovie(movie.getId(), movieRepository, ratingRepository);

        }

        return movieRepository.findByTitleContaining(
                title,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                        sortBy.orElse("id")
                )
        );
    }

    @GetMapping(path="/year/{year}")
    //@JsonView(Views.Public.class)
    public @ResponseBody
    Page<Movie> findMoviesByYear(
            @PathVariable Integer year,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy
    ) {
        // This returns a JSON or XML with the movies
        //return movieRepository.findByYear(year);
        return movieRepository.findByYear(
                year,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping(path="/rated/{rated}")
    //@JsonView(Views.Public.class)
    public @ResponseBody
    Page<Movie> findMoviesByRating(
            @PathVariable String rated,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy) {
        // This returns a JSON or XML with the movies
        //return movieRepository.findAllByRated(rated);
        return movieRepository.findByRated(
                rated,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/{id}")
    @JsonView(Views.Public.class)
    public @ResponseBody
    Optional<Movie> findMovieById(
            @PathVariable(value = "id") String id)
    {
        API.ProcessMovie(id, movieRepository, ratingRepository);
        //API.background(id);
        return movieRepository.findById(id);
    }

    @GetMapping("/genre/{name}")
    //@JsonView(Views.Public.class)
    public @ResponseBody
    Page<Movie> findMoviesByGenre(
            @PathVariable(value = "name") String name,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy,
            @RequestParam Optional<Integer> orderBy
    )
    {
        // This returns a JSON or XML with the movies
        //return movieRepository.findByTitle(title);

        Sort.Direction sort = Sort.Direction.ASC;
        if(orderBy.isPresent()) {
            if(orderBy.get() == 1){
                sort = Sort.Direction.DESC;
            }

        }
        return movieRepository.findMovieByGenreName(
                name,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        sort,
                        sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/genre/id/{id}")
    //@JsonView(Views.Public.class)
    public @ResponseBody
    Page<Movie> findMoviesByGenreId(
            @PathVariable(value = "id") Integer id,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy)

    {
        return movieRepository.findMovieByGenreId(
                id,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping("/star/{id}")
    //@JsonView(Views.Public.class)
    public @ResponseBody
    Page<Movie> findMoviesByStarId(
            @PathVariable(value = "id") String id,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy)

    {
        return movieRepository.findMovieByStarId(
                id,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }

    @GetMapping(path="/search/{search}")
    public @ResponseBody
    Page<Movie> getAllSearch(
            @PathVariable String search,
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<Integer> orderBy,
            @RequestParam Optional<String> sortBy
    ) {


        // This returns a JSON or XML with the movies
        return movieRepository.findMoviesByIdOrTitleContaining(
                search,
                search,
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        orderBy.orElse(1) == 1 ? Sort.Direction.DESC : Sort.Direction.ASC,
                        sortBy.orElse("id")
                )
        );

    }


    @PutMapping("/{id}")
    public @ResponseBody
    ResponseEntity<?> addMovieById(
            @PathVariable(value = "id") String id,
            @RequestBody MovieRequest request)
    {
        Optional<Movie> movieOptional = movieRepository.findById(id);
        if (movieOptional.isPresent()) {
            return new ResponseEntity<>(movieRepository.save(movieOptional.get()), HttpStatus.CONFLICT);
        }

        else {
            Movie movie = service.createMovie(request);
            return new ResponseEntity<>(movieRepository.save(movie), HttpStatus.CREATED);
        }

    }


    @PostMapping("/{id}")
    public @ResponseBody
    ResponseEntity<?> updateMovieById(
            @PathVariable(value = "id") String id,
            @RequestBody MovieRequest request)
    {
        System.out.println("updateMovieById");

        Optional<Movie> movie = movieRepository.findById(id);
        if(movie.isPresent()) {
            Boolean update = service.updateMovie(request);
            System.out.println("update: " + update);
            return ResponseEntity.ok((update == true)? "Movie updated" : "Movie not updated");
        }
        return ResponseEntity.notFound().build();
    }


    /**
    @GetMapping("/ratings/")
    //@JsonView(Views.Public.class)
    public @ResponseBody
    Page<Movie> findTopRatedMovies(
            @RequestParam Optional<Integer> limit,
            @RequestParam Optional<Integer> page,
            @RequestParam Optional<String> sortBy)

    {
        return movieRepository.findByTopRated(
                PageRequest.of(
                        page.orElse(0),
                        limit.orElse(5),
                        Sort.Direction.ASC, sortBy.orElse("id")
                )
        );
    }
    **/
}